<?php
/**
 * @file
 * Module file.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 */
function openy_map_lb_theme($existing, $type, $theme, $path) {
  return [
    'block__lb_openy_map' => [
      'base hook' => 'block',
      'template' => 'block--lb-openy-map',
    ],
    'openy_map_lb' => [
      '#options' => [],
      'render element' => 'element',
    ],
    'views_view__locations_lb' => [
      'base hook' => 'view'
    ],
    'node__location_type__lb_teaser' => [
      'base hook' => 'node'
    ]
  ];
}

/**
 * Implements template_preprocess_HOOK().
 */
function openy_map_lb_preprocess_block__lb_openy_map(&$variables) {
  $block_manager = \Drupal::service('plugin.manager.block');
  $config = [];
  $plugin_block = $block_manager->createInstance('location_finder_lb', $config);
  // Some blocks might implement access check.
  $access_result = $plugin_block->access(\Drupal::currentUser());
  // Return empty render array if user doesn't have access.
  // $access_result can be boolean or an AccessResult class
  if (is_object($access_result) && $access_result->isForbidden() || is_bool($access_result) && !$access_result) {
    // You might need to add some cache tags/contexts.
    return;
  }
  $render = $plugin_block->build();
  // Add the cache tags/contexts.
  \Drupal::service('renderer')->addCacheableDependency($render, $plugin_block);
  $variables['content'] = $render;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function openy_map_lb_node_view_alter( array &$build, EntityInterface $entity, EntityViewDisplayInterface $display ) {
  $activeTypes = \Drupal::configFactory()->get('openy_map.settings')->get('active_types');
  $activeTypes = !empty($activeTypes) ? array_keys(array_filter($activeTypes)) : [];
  if ($build['#view_mode'] == 'teaser' && $entity->hasField('field_location_coordinates') && in_array($entity->bundle(), $activeTypes)) {
    $build['#cache']['contexts'][] = 'url.path';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function openy_map_lb_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  $has_layout =& drupal_static(__FUNCTION__, NULL);
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['elements']['#node'];
  $view_mode = $variables['elements']['#view_mode'];
  // Check for active types.
  $activeTypes = \Drupal::configFactory()->get('openy_map.settings')->get('active_types');
  $activeTypes = !empty($activeTypes) ? array_keys(array_filter($activeTypes)) : [];
  if (is_null($has_layout)) {
    $current_page = Drupal::routeMatch()->getParameter('node');
    $has_layout = ($current_page instanceof NodeInterface) && $current_page->hasField('layout_builder__layout');
  }
  // Add universal template for all location content type teasers.
  if ($view_mode == 'teaser' && $node->hasField('field_location_coordinates') && in_array($node->bundle(), $activeTypes)) {
    if ($has_layout) {
      $suggestions[] = 'node__location_type__lb_teaser';
    }
  }
}


/**
 * Implements hook_preprocess_HOOK().
 */
function openy_map_lb_preprocess_node__location_type__lb_teaser(&$variables) {
  $hoursHelper = Drupal::getContainer()->get('y_branch.hours_helper');
  $node = $variables['elements']['#node'];
  if (!$node) {
    return;
  }

  $directions_url = '';
  if (isset($variables['content']['field_location_directions']['0'])) {
    $directions_url = $variables['content']['field_location_directions']['0']['#url']->toString();
  }
  else if (!empty($node->get('field_location_address')->getValue())) {
    $address_array = $node->get('field_location_address')->getValue()[0];
    $directions_url = Url::fromUri('https://www.google.com/maps/dir/', [
      'query' => [
        'api' => 1,
        'destination' => "{$address_array['address_line1']} {$address_array['locality']}, {$address_array['administrative_area']} {$address_array['postal_code']}",
      ],
    ])->toString();
  }

  $variables['content']['field_location_directions']['#url'] = $directions_url;

  $branch_hours = $hoursHelper->getBranchHours($node);
  $holiday_hours = $hoursHelper->getBranchHolidayHours($node);
  unset($variables['content']['field_branch_hours'][0]['table']);
  $variables['#attached'] = [
    'library' => [
      'openy_map_lb/hours_today',
    ],
    'drupalSettings' => [
      'lb_branch_hours_blocks' => [
        'exceptions' => $holiday_hours['js_settings'],
        'tz' => $hoursHelper->getTimezone(),
      ]
    ]
  ];
  $variables['#attached']['drupalSettings']['lb_branch_hours_blocks']['branch_hours'][$node->id()] = $branch_hours['js_settings'];

  // Use the bundle label, not the machine name, to respect translation and 
  // changes to the name made in bundle config.
  // via https://drupal.stackexchange.com/a/187983/24177
  $variables['bundle_label'] = $node->type->entity->label();
}
